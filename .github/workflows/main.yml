name: Code Inspector

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - '*'

jobs:
  code-inspection:
    name: Code Inspection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Check if Python files exist
        run: |
          if ! find . -name "*.py" -print -quit | grep -q .; then
            echo "No Python files found, skipping Python inspection."
            touch python_inspection_skipped
          fi

      - name: Install dependencies for Python
        if: success() && -f python_inspection_skipped
        run: |
          pip install flake8
          pip install pylint

      - name: Run Flake8
        if: success() && -f python_inspection_skipped
        id: flake8
        run: |
          flake8 . > flake8_results.txt || true

      - name: Run Pylint
        if: success() && -f python_inspection_skipped
        id: pylint
        run: |
          pylint . > pylint_results.txt || true

      - name: Parse Flake8 output and calculate score
        if: success() && -f python_inspection_skipped
        run: |
          flake8_issues=0
          if grep -q '^[^:]*:.*:' flake8_results.txt; then
            flake8_issues=$(grep -c '^[^:]*:.*:' flake8_results.txt)
          fi
          flake8_score=$((100 - flake8_issues * 10))
          echo "Flake8 score: $flake8_score"
          if [ $flake8_score -lt 100 ]; then
            echo "Code quality score: FAIL"
            exit 1
          else
            echo "Code quality score: PASS"
          fi

      - name: Display Flake8 issues
        if: success() && -f python_inspection_skipped
        run: |
          echo "Flake8 issues found:"
          cat flake8_results.txt

      - name: Check if .NET files exist
        run: |
          if ! find . -name "*.csproj" -print -quit | grep -q .; then
            echo "No .NET files found, skipping .NET inspection."
            touch dotnet_inspection_skipped
          fi

      - name: Setup .NET Core SDK
        if: success() && -f dotnet_inspection_skipped
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x' # Change this to match your project's SDK version

      - name: Restore dependencies for .NET
        if: success() && -f dotnet_inspection_skipped
        run: dotnet restore

      - name: Analyze code with StyleCop
        if: success() && -f dotnet_inspection_skipped
        run: dotnet tool run dotnet-stylecop analyze --report-file stylecop_results.txt

      - name: Analyze code with Roslyn Analyzers
        if: success() && -f dotnet_inspection_skipped
        run: dotnet build /p:ReportAnalyzer=true /p:AnalyzerReportOutputDirectory=roslyn_results

      - name: Parse StyleCop output and calculate score
        if: success() && -f dotnet_inspection_skipped
        run: |
          stylecop_issues=0
          if grep -q 'warning' stylecop_results.txt; then
            stylecop_issues=$(grep -c 'warning' stylecop_results.txt)
          fi
          stylecop_score=$((100 - stylecop_issues * 10))
          echo "StyleCop score: $stylecop_score"
          if [ $stylecop_score -lt 100 ]; then
            echo "Code quality score: FAIL"
            exit 1
          else
            echo "Code quality score: PASS"
          fi

      - name: Display StyleCop issues
        if: success() && -f dotnet_inspection_skipped
        run: |
          echo "StyleCop issues found:"
          cat stylecop_results.txt
