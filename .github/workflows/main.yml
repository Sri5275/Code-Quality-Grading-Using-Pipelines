name: Code Inspector

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - '*'

jobs:
  code-inspection:
    name: Code Inspection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Check if Python files exist
        id: check_python_files
        run: |
          if find . -name "*.py" -print -quit | grep -q .; then
            echo "python_files_exist=true" >> $GITHUB_ENV
          else
            echo "python_files_exist=false" >> $GITHUB_ENV
          fi

      - name: Install dependencies for Python
        if: env.python_files_exist == 'true'
        run: |
          pip install flake8
          pip install pylint

      - name: Run Flake8
        if: env.python_files_exist == 'true'
        id: flake8
        run: |
          flake8 . > flake8_results.txt || true

      - name: Run Pylint
        if: env.python_files_exist == 'true'
        id: pylint
        run: |
          pylint . > pylint_results.txt || true

      - name: Parse Flake8 output and calculate score
        if: env.python_files_exist == 'true'
        run: |
          flake8_issues=0
          if grep -q '^[^:]*:.*:' flake8_results.txt; then
            flake8_issues=$(grep -c '^[^:]*:.*:' flake8_results.txt)
          fi
          flake8_score=$((100 - flake8_issues * 10))
          echo "Flake8 score: $flake8_score"
          if [ $flake8_score -lt 100 ]; then
            echo "Code quality score: FAIL"
            exit 1
          else
            echo "Code quality score: PASS"
          fi

      - name: Display Flake8 issues
        if: env.python_files_exist == 'true'
        run: |
          echo "Flake8 issues found:"
          cat flake8_results.txt

      - name: Check if C# files exist
        id: check_csharp_files
        run: |
          if find . -name "*.cs" -print -quit | grep -q .; then
            echo "csharp_files_exist=true" >> $GITHUB_ENV
          else
            echo "csharp_files_exist=false" >> $GITHUB_ENV
          fi

      - name: Setup .NET Core SDK for C#
        if: env.csharp_files_exist == 'true'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x' # Change this to match your project's SDK version

      - name: Restore dependencies for C#
        if: env.csharp_files_exist == 'true'
        run: |
          if [ -f "*.csproj" ]; then
            dotnet restore .
          else
            echo "C# project file not found. Skipping dotnet restore."
          fi

      - name: Analyze code with StyleCop for C#
        if: env.csharp_files_exist == 'true'
        run: dotnet tool run dotnet-stylecop analyze --report-file stylecop_csharp_results.txt

      - name: Analyze code with Roslyn Analyzers for C#
        if: env.csharp_files_exist == 'true'
        run: dotnet build /p:ReportAnalyzer=true /p:AnalyzerReportOutputDirectory=roslyn_csharp_results

      - name: Parse StyleCop output for C# and calculate score
        if: env.csharp_files_exist == 'true'
        run: |
          stylecop_csharp_issues=0
          if grep -q 'warning' stylecop_csharp_results.txt; then
            stylecop_csharp_issues=$(grep -c 'warning' stylecop_csharp_results.txt)
          fi
          stylecop_csharp_score=$((100 - stylecop_csharp_issues * 10))
          echo "StyleCop score for C#: $stylecop_csharp_score"
          if [ $stylecop_csharp_score -lt 100 ]; then
            echo "Code quality score for C#: FAIL"
            exit 1
          else
            echo "Code quality score for C#: PASS"
          fi

      - name: Display StyleCop issues for C#
        if: env.csharp_files_exist == 'true'
        run: |
          echo "StyleCop issues found for C#:"
          cat stylecop_csharp_results.txt
